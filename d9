#!/usr/bin/env bash
# Regular Colors
BLACK='\033[0;30m'  # Black
RED='\033[0;31m'    # Red
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
BLUE='\033[0;34m'   # Blue
PURPLE='\033[0;35m' # Purple
CYAN='\033[0;36m'   # Cyan
WHITE='\033[0;37m'  # White
NC='\033[0m'
declare -a CUSTOM_F_COLOR=()
declare -a CUSTOM_B_COLOR=()
function SET_COLORS()
{
    iter=16
    while [ $iter -lt 52 ]
    do
        second=$[$iter+36]
        third=$[$second+36]
        four=$[$third+36]
        five=$[$four+36]
        six=$[$five+36]
        seven=$[$six+36]
        if [ $seven -gt 250 ];then seven=$[$seven-251]; fi
        CUSTOM_F_COLOR[$iter]="\033[38;5;${iter}m"
        CUSTOM_B_COLOR[$iter]="\033[48;5;${iter}m"
        CUSTOM_F_COLOR[$second]="\033[38;5;${second}m"
        CUSTOM_B_COLOR[$second]="\033[48;5;${second}m"
        CUSTOM_F_COLOR[$third]="\033[38;5;${third}m"
        CUSTOM_B_COLOR[$third]="\033[48;5;${third}m"
        CUSTOM_F_COLOR[$four]="\033[38;5;${four}m"
        CUSTOM_B_COLOR[$four]="\033[48;5;${four}m"
        CUSTOM_F_COLOR[$five]="\033[38;5;${five}m"
        CUSTOM_B_COLOR[$five]="\033[48;5;${five}m"
        CUSTOM_F_COLOR[$six]="\033[38;5;${six}m"
        CUSTOM_B_COLOR[$six]="\033[48;5;${six}m"
        CUSTOM_F_COLOR[$seven]="\033[38;5;${seven}m"
        CUSTOM_B_COLOR[$seven]="\033[48;5;${seven}m"
        iter=$[$iter+1]
    done
}
SET_COLORS

function PRINT_COLORS( )
{
    iter=16

    while [ $iter -lt 52 ]
    do
        second=$[$iter+36]
        third=$[$second+36]
        four=$[$third+36]
        five=$[$four+36]
        six=$[$five+36]
        seven=$[$six+36]
        if [ $seven -gt 250 ];then seven=$[$seven-251]; fi
        echo -en "\033[38;5;$(echo $iter)m█ "
        printf "%d" $iter
        echo -en "   \033[38;5;$(echo $second)m█ "
        printf "%d" $second
        echo -en "   \033[38;5;$(echo $third)m█ "
        printf "%d" $third
        echo -en "   \033[38;5;$(echo $four)m█ "
        printf "%d" $four
        echo -en "   \033[38;5;$(echo $five)m█ "
        printf "%d" $five
        echo -en "   \033[38;5;$(echo $six)m█ "
        printf "%d" $six
        echo -en "   \033[38;5;$(echo $seven)m█ "
        printf "%d" $seven
        iter=$[$iter+1]
        printf '\r\n'
    done
}
# Verify operating system is supported...
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
  echo -e "${YELLOW}Unsupported operating system [$(uname -s)]. docker supports macOS, Linux, and Windows (WSL2) that should be ubuntu." >&2
  exit 1
fi
# Define environment variables...
export APP_PORT="${APP_PORT:-80}"
export APP_SERVICE="${APP_SERVICE:-"web"}"
export DB_SERVICE="${DB_SERVICE:-"db"}"
export DB_USER="${DBUSER:-"root"}"
export DB_PASSWORD="${DBSECRET:-"root"}"
export COMPOSER_SERVICE="${APP_SERVICE:-"composer"}"
export DB_PORT="${DB_PORT:-3306}"
export WWWUSER="${WWWUSER:-$(id -u)}"
export WWWGROUP="${WWWGROUP:-$(id -g)}"
# export drush and composer command
export DRUSH="${DRUSH:-"/var/www/html/vendor/bin/drush"}"
export COMPOSER="${COMPOSER:-"/usr/bin/composer"}"


CURRENT_DIR=$(pwd)
d9=/usr/local/bin/d9
VENDOR_ROOT="${CURRENT_DIR}"/vendor/
NODE_ROOT="${CURRENT_DIR}"/node_modules/
docker info >/dev/null 2>&1
if ! docker info >/dev/null 2>&1; then
  echo -e "${WHITE}Docker is not running.${NC}" >&2

  exit 1
fi
COMPOSE="docker-compose"
# Determine if any container exit and it means docker compose do something d9 is currently up...
PSRESULT="$(docker-compose ps -q)"
if [ -n "$PSRESULT" ]; then
  EXEC="yes"
else
  EXEC="no"
fi

# Function that outputs d9 is not running...
function d8_is_not_running() {
  echo -e "${WHITE}d9 service(s) is not running.${NC}" >&2
  echo -e "${WHITE}You may run d9 service(s) using the following commands:${NC} './d9 up|d9 up' or './d9 up -d|d9 up -d'" >&2
  exit 1
}

if [ $# -gt 0 ]; then
  # Source the ".env" file so Drupal's environment variables are available...
  if [ -f ./.env ]; then
    source ./.env
  else
      if [ -f ./.env.example ]; then
          cp ./.env.example ./.env
          source ./.env
      fi
  fi
  if [ "$1" == "initialize" ] || [ "$1" == "-init" ]; then
    shift 1
    echo -e "${RED} start delete old d9 files from /usr/local/bin directory ${NC}\r\n"
    sudo rm -rf ${d9} && sudo rm -rf ${d9} || exit

    sudo chmod +x d9
    sudo ln -s "${CURRENT_DIR}/d9" /usr/local/bin/d9
    echo -e "${GREEN} d9 add to /usr/bin directory successfully ${NC}"

    echo -e "${BLUE} start to set vendor directory permission${NC}"
    sudo chown -R "${WWWUSER}":"${WWWGROUP}" "${VENDOR_ROOT}" && sudo chmod -R 777 "${VENDOR_ROOT}"
    echo -e "${BLUE} permission set for composer directory ${NC}\r\n"

    echo -e "${CYAN} start to set node_modules directory permission${NC}"
    sudo chown -R "${WWWUSER}":"${WWWGROUP}" "${NODE_ROOT}" && sudo chmod -R 777 "${NODE_ROOT}"
    echo -e "${GREEN} permission set for node_modules directory ${NC}\r\n"

  elif [ "$1" == "help" ] || [ "$1" == "-h" ]; then
    shift 1
    echo -e "${CUSTOM_F_COLOR[4]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_F_COLOR[4]} |${CUSTOM_F_COLOR[26]}                                   you have these commands for execute                                               ${CUSTOM_F_COLOR[4]}|${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[202]}    help | -h:                                                                                                          ${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[172]}          this commmand show help of d9 command                                                                         ${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[196]}             sample : d9  help                                                                                          ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[202]}    print-colors | -prc:                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[172]}          this commmand print color palete to help you when you wanna chose color for                                   ${NC}"
    echo -e "${CUSTOM_B_COLOR[0]}${CUSTOM_F_COLOR[196]}             sample : d9  -prc                                                                                          ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[184]}    docker-stop | -ds:                                                                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[202]}       with this command other project that run with docker and bind required ports will stop,and then you can run d9   ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[88]}          sample : d9 docker-stop | d9 -ds                                                                              ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[104]}   up:                                                                                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[140]}      d9 up use for running docker-compose up commands                                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[160]}         sample : d9 up                                                                                                 ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[32]}   down:                                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[68]}       d9 down use for running docker-compose down commands                                                             ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[160]}           sample : d9 down                                                                                             ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[104]}    php:                                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[140]}       d9 php use for proxy php commands to your web container service                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[160]}            sample : d9 php -v                                                                                          ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[104]}    bin:                                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[140]}      d9 bin use for proxy vendor binary commands on the web container                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[160]}           sample : d9 bin php-parse                                                                                    ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[32]}    composer:                                                                                                           ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[68]}       d9 composer use for proxy composer commands to your web container service                                        ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[160]}           sample : d9 composer -v                                                                                      ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[104]}   drush:                                                                                                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[140]}       d9 drush use for proxy drush commands to your web container service                                              ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[160]}            sample : d9 drush cr                                                                                        ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[32]}   config-import | -cim:                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[68]}       d9 config-import |d9 -cim use for proxy drush command to application container and export configs                ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[160]}          sample : d9 -cim                                                                                              ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[56]}              Enter your website name:${WHITE}xxx.de${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[56]}                                                                            ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[104]}   config-export | -cex:                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[140]}       d9 config-export |d9 -cex use for proxy drush command to application container and export configs                ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[160]}           sample : d9 -cex                                                                                             ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[34]}               Enter your website name:${GREEN}xxx.de${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[34]}                                                                           ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[32]}   install-module | -im:                                                                                                ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[68]}       d9 install-module |d9 -im use for proxy to drush commands to install a module in your  web container service     ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[160]}          sample : d9 -im                                                                                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[106]}              Enter your website name:${RED}xxx.de${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[106]}                                                                            ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[36]}              Enter module name (ex:ctool):${PURPLE}ctool${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[36]}                                                                        ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[104]}   uninstall-module | -um:                                                                                              ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[140]}       d9 uninstall-module | d9 -um use for proxy to drush commands to uninstall a module in your  web container service${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[160]}           sample : d9 um                                                                                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[134]}              Enter your website name :                                                                                 ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[34]}              Enter module name (ex:ctool): :${red}ctool${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[234]}                                                                      ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[32]}   mysql | mariadb:                                                                                                     ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[68]}      d9 mysql use for initiate a mysql CLI terminal session within the 'db' container                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[160]}          sample: d9 mysql                                                                                              ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[56]}              Enter your database name: ${CYAN}d9${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[56]}                                                                              ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[184]}  mysql-bash | mariadb-bash:                                                                                            ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[202]}     d9 mysql-bash | mariadb-bash  use for get bash terminal session from the 'db' container                            ${NC}"
    echo -e "${CUSTOM_B_COLOR[232]}${CUSTOM_F_COLOR[88]}           sample: d9 mysql-bash                                                                                        ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[104]}  shell|bash:                                                                                                           ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[140]}     d9 shell use for initiate a bash shell within the 'web' container                                                  ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[160]}          sample : d9 shell                                                                                             ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[104]}   redis:                                                                                                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[140]}      d9 redis use for Initiate a Redis CLI terminal session within the 'redis' container                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[16]}${CUSTOM_F_COLOR[160]}           sample : d9 redis                                                                                            ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[104]}  any other composer commands :                                                                                         ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[140]}     Pass unknown commands to the 'docker-compose' binary                                                               ${NC}"
    echo -e "${CUSTOM_B_COLOR[233]}${CUSTOM_F_COLOR[160]}          sample : d9  ls                                                                                               ${NC}"
    echo -e "${CUSTOM_F_COLOR[180]} -----------------------------------------------------------------------------------------------------------------------${NC}"

  # stop old docker services
  elif [ "$1" == "docker-stop" ] || [ "$1" == "-ds" ]; then
    shift 1
    if [ "$MACHINE" == "linux" ]; then
      NGINXRUNNING=$(systemctl is-active nginx)
      APACHERUNNING=$(systemctl is-active apache2)
      MYSQLRUNNING=$(systemctl is-active mysql)
      if [ $APACHERUNNING = "active" ] ; then
        echo -e "${CYAN}Apache is running, stopping it${NC}"
        sudo service apache2 stop
        echo -e "${YELLOW}Apache2 stopped${NC}"
      fi
      if [ $NGINXRUNNING = "active" ] ; then
        echo -e "${PURPLE}nginx is running, stopping it${NC}"
        sudo service nginx stop
        echo "${YELLOW}Nginx stopped${NC}"
      fi
      if [ $MYSQLRUNNING = "active" ] ; then
        echo -e "${BLACK}MySql is running, stopping it${NC}"
        sudo service mysql stop
        echo -e "${YELLOW}MySql stopped${NC}"
      fi
    fi
    if [ "$MACHINE" == "mac" ]; then
      NGINXRUNNING=$(ps aux | grep -v grep | grep -c  -i ^nginx$)
      APACHERUNNING=$(ps aux |grep -v grep | grep -c  -i ^httpd$)
      MYSQLRUNNING=$(ps aux | grep -v grep | grep -c  -i ^mysql$)
      if [ $APACHERUNNING != 0 ] ; then
        echo -e "${CYAN}Apache is running, stopping it${NC}"
        brew services stop httpd
        echo -e "${YELLOW}Apache2 stopped${NC}"
      fi
      if [ $NGINXRUNNING != 0 ] ; then
        echo -e "${PURPLE}nginx is running, stopping it${NC}"
        brew services stop nginx
        echo "${YELLOW}Nginx stopped${NC}"
      fi
      if [ $MYSQLRUNNING != 0 ] ; then
        echo -e "${BLACK}MySql is running, stopping it${NC}"
        brew services stop mysql
        echo -e "${YELLOW}MySql stopped${NC}"
      fi
    fi
    echo -e "${YELLOW}Stopping Dockers...${NC}"
    docker stop $(docker ps -a -q)
    echo -e "Docker ${GREEN}Stopped${NC}"
    echo -e "${YELLOW}Stopping Docker-compose...${NC}"
    $COMPOSE stop
    echo -e "Docker-compose ${GREEN}Stopped${NC}"
    echo -e "${YELLOW}Old docker running project stopped ,now you can start d9...${NC}"
  # Proxy PHP commands to the "php" binary on the application container...
  elif [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
      # shellcheck disable=SC2124
      EXEC_CMD="cd /var/www/html/web && php $@"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
    else
      d8_is_not_running
    fi
  # Proxy vendor binary commands on the application container...
  elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
      # shellcheck disable=SC2124
      EXEC_CMD="cd /var/www/html/vendor/bin $@"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
    else
      d8_is_not_running
    fi
  # Proxy Composer commands to the "composer" binary on the application container...
  elif [ "$1" == "composer" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      EXEC_CMD="composer $@"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
    else
      d8_is_not_running
    fi

  # Proxy drush commands to the application container...
  elif [ "$1" == "drush" ] || [ "$1" == "-drs" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      EXEC_CMD="$DRUSH $@"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
    else
      d8_is_not_running
    fi
  # Proxy drush commands to the application container and execute config import for selected brands ...
  elif [ "$1" == "config-import" ] || [ "$1" == "-cim" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${CYAN}Enter brand abbreviation name (bsag,ses): ${NC}"
      echo -e -n "${YELLOW}"
      read brand
      echo -e "${RED}Starting config import... "
      EXEC_CMD="$DRUSH -l $brand cim"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
      echo -e "${BLUE}config import finished."
    else
      d8_is_not_running
    fi
  # Proxy drush commands to the application container and execute config export for selected brands ...
  elif [ "$1" == "config-export" ] || [ "$1" == "-cex" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${CYAN}Enter brand abbreviation name (bsag,ses): ${NC}"
      echo -e -n "${YELLOW}"
      read brand
      echo -e "${GREEN}Starting config export... "
      EXEC_CMD="$DRUSH -l $brand cex"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
      echo -e "${RED}config export finished."
    else
      d8_is_not_running
    fi
  # Proxy install-module commands to the "drush" binary on the application container, update composer , export config
  elif [ "$1" == "install-module" ] || [ "$1" == "-im" ]; then
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${CYAN}Enter brand abbreviation name (bsag,ses): ${NC}"
      echo -e -n "${YELLOW}"
      read brand
      echo -e -n "${RED}Enter module name (ex:ctool):  ${NC}"
      echo -e -n "${BLUE}"
      read module
      echo -e -n "${YELLOW}Shall we get module from drupal.org using composer (1<yes>,2<no>) please enter corresponding number:  ${NC}"
      echo -e -n "${BLACK}"
      read COMPOSER_GET
      echo -e -n "${NC}"
      if [ "$COMPOSER_GET" = 1 ]; then
        echo "Starting getting "$module
        EXEC_CMD="$COMPOSER require drupal/$module"
        $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
      fi
      echo "Starting installing "$module
      EXEC_CMD="$DRUSH -l $brand pm:enable $module"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
      echo "Starting exporting config files after installing this module:"$module
      shift 1
      EXEC_CMD="$DRUSH -l $brand cex $@"
      $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
    else
      d8_is_not_running
    fi
  # Proxy uninstall-module commands to the "drush" binary on the application container, update composer , export config
  elif [ "$1" == "uninstall-module" ] || [ "$1" == "-um" ]; then
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${CYAN}Enter brand abbreviation name (bsag,ses): ${NC}"
      echo -e -n "${YELLOW}"
      read brand
      echo -e -n "${BLUE}Enter module name (ex:ctool):  ${NC}"
      echo -e -n "${RED}"
      read module
      echo -e -n "${GREEN}Shall we uninstall module using composer too or you wanna just uninstall it from drupal 8 websites (1<yes>,2<no>) please enter corresponding number: ${NC}"
      echo -e -n "${WHITE}"
      read COMPOSER_UNINSTALL
      echo -e -n "${NC}"
      echo "Starting uninstall "$module
      shift 1
      EXEC_CMD="$DRUSH -l $brand pm:uninstall $module $@"
      echo "Starting exporting config files "$module
      EXEC_CMD="$DRUSH -l $brand cex $@"
      if [ "$COMPOSER_UNINSTALL" = 1 ]; then
        echo "Starting removing module:"$module && echo " from composer file"
        EXEC_CMD="$COMPOSER remove drupal/$module $@"
        $COMPOSE exec -u d9 "$APP_SERVICE" bash -c "$EXEC_CMD"
      fi
      echo "Restarting Docker..."
      $COMPOSE restart
    else
      d8_is_not_running
    fi
  # Initiate a MySQL CLI terminal session within the "db" container...
  elif [ "$1" == "mysql" ] || [ "$1" == "mariadb" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${PURPLE}Enter your database name: ${NC}"
      echo -e -n "${CYAN}"
      read DBNAME
      echo -e -n "${NC}"
      $COMPOSE exec  "$DB_SERVICE" bash -c "mysql  -u$DBUSER -p$DBSECRET $DBNAME"
    else
      d8_is_not_running
    fi
  # Initiate a MySQL CLI terminal session within the "db" container...
  elif [ "$1" == "mysql-bash" ] || [ "$1" == "mariadb-bash" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      echo -e -n "${CYAN}"
      $COMPOSE exec  "$DB_SERVICE" bash
    else
      d8_is_not_running
    fi
  # Initiate a Bash shell within the application container...
  elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      docker-compose exec \
        -u d9 \
        "$APP_SERVICE" \
        bash
    else
      d8_is_not_running
    fi
  # Initiate a Redis CLI terminal session within the "redis" container...
  elif [ "$1" == "redis" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
      docker-compose exec \
        redis \
        redis-cli
    else
      d8_is_not_running
    fi  # Pass unknown commands to the "docker-compose" binary...
  else
    $COMPOSE "$@"
  fi
else
  $COMPOSE ps
fi
